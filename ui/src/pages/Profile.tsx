import React, { useState, useEffect } from 'react';
import { User, Phone, Shield, Clock, Smartphone, Edit, Save, X } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { useSubscription } from '../context/SubscriptionContext';
import UserService from '../services/userService';

const Profile: React.FC = () => {
  const { user, logout, updateUser } = useAuth();
  const { currentPlan } = useSubscription();
  const [isEditing, setIsEditing] = useState(!user?.isProfileComplete); // Auto-edit if profile incomplete
  const [isSaving, setIsSaving] = useState(false);
  const [message, setMessage] = useState('');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    tradingExperience: 'Intermediate' as const,
    tradingStyle: 'Swing Trading' as const
  });

  useEffect(() => {
    // Initialize form data from user
    if (user) {
      // Clear auto-generated dummy data for new users
      const isAutoGeneratedName = user.name?.startsWith('User ');
      const isAutoGeneratedEmail = user.email?.includes('@traderdesk.ai');
      
      setFormData({
        name: isAutoGeneratedName ? '' : (user.name || ''),
        email: isAutoGeneratedEmail ? '' : (user.email || ''),
        tradingExperience: (user.tradingExperience || 'Intermediate') as any,
        tradingStyle: (user.tradingStyle || 'Swing Trading') as any
      });
    }
  }, [user]);

  const handleSave = async () => {
    try {
      setIsSaving(true);
      setMessage('');

      // Validate required fields
      if (!formData.name || !formData.email || !formData.tradingExperience || !formData.tradingStyle) {
        setMessage('All fields are required');
        return;
      }

      // Update profile via API
      const result = await UserService.updateProfile(formData);

      if (result.success) {
        setMessage('Profile updated successfully!');
        setIsEditing(false);
        
        // Update local user data
        if (result.data?.user) {
          const updatedUser = {
            ...user!,
            name: result.data.user.name,
            email: result.data.user.email,
            tradingExperience: result.data.user.tradingExperience as any,
            tradingStyle: result.data.user.tradingStyle as any,
            isProfileComplete: result.data.user.isProfileComplete
          };
          
          // Update user in context and localStorage
          updateUser(updatedUser);
          
          // If profile is now complete and this was a forced edit, show success
          if (result.data.user.isProfileComplete && !user?.isProfileComplete) {
            setMessage('Profile completed! You can now access all features.');
          }
        }
        
        // Clear success message after 3 seconds
        setTimeout(() => setMessage(''), 3000);
      } else {
        // Show error message from backend
        setMessage(result.message || 'Failed to update profile');
      }
    } catch (error) {
      console.error('Profile update error:', error);
      setMessage('Failed to update profile. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  const sessionInfo = {
    deviceId: user?.deviceId?.slice(-8) || 'Unknown',
    sessionId: user?.sessionId?.slice(-8) || 'Unknown',
    loginTime: new Date().toLocaleString(),
    expiryTime: user?.sessionExpiry ? new Date(user.sessionExpiry).toLocaleString() : 'Unknown',
    remainingTime: user?.sessionExpiry ? 
      Math.max(0, Math.floor((new Date(user.sessionExpiry).getTime() - new Date().getTime()) / 1000 / 60 / 60)) 
      : 0
  };

  return (
    <div className="p-4 md:p-6 space-y-6">
      {/* Profile Completion Notice */}
      {!user?.isProfileComplete && (
        <div className="bg-gradient-to-r from-orange-900/20 to-orange-800/20 border border-orange-700/30 rounded-sm p-4">
          <div className="flex items-center space-x-2">
            <Edit className="w-5 h-5 text-orange-400" />
            <div>
              <h3 className="font-semibold text-orange-300">Complete Your Profile</h3>
              <p className="text-sm text-orange-300/80 mt-1">
                Please complete your profile information to access all trading features.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-200">Profile Settings</h1>
          <p className="text-slate-400 mt-1">
            {user?.isProfileComplete 
              ? 'Manage your account and preferences' 
              : 'Complete your profile to access all features'
            }
          </p>
        </div>
        {user?.isProfileComplete && (
          <button
            onClick={() => setIsEditing(!isEditing)}
            className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-green-600 to-green-500 text-white rounded-sm hover:from-green-700 hover:to-green-600 transition-all duration-200 shadow-lg hover:shadow-green-500/25"
          >
            {isEditing ? <X className="w-4 h-4" /> : <Edit className="w-4 h-4" />}
            <span>{isEditing ? 'Cancel' : 'Edit Profile'}</span>
          </button>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Profile Information */}
        <div className="professional-card p-6 border border-slate-700/50">
          <div className="flex items-center space-x-2 mb-6">
            <User className="w-5 h-5 text-green-400" />
            <h2 className="text-xl font-semibold text-slate-200">Profile Information</h2>
          </div>

          <div className="space-y-6">
            {/* Avatar */}
            <div className="flex items-center space-x-4">
              <div className="w-20 h-20 bg-gradient-to-br from-green-600 to-green-500 rounded-2xl flex items-center justify-center">
                <span className="text-2xl font-bold text-white">
                  {user?.phone?.slice(-2) || 'TD'}
                </span>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-slate-200">{formData.name}</h3>
                <p className="text-sm text-slate-400">{user?.phone}</p>
              </div>
            </div>

            {/* Form Fields */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Full Name</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  disabled={!isEditing}
                  placeholder="Enter your full name"
                  className="w-full px-4 py-3 bg-slate-800/60 border border-slate-600/50 rounded-sm text-slate-200 focus:outline-none focus:ring-2 focus:ring-green-500/30 focus:border-green-500/50 disabled:bg-slate-800/30 disabled:cursor-not-allowed placeholder-slate-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Email</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  disabled={!isEditing}
                  placeholder="Enter your email address"
                  className="w-full px-4 py-3 bg-slate-800/60 border border-slate-600/50 rounded-sm text-slate-200 focus:outline-none focus:ring-2 focus:ring-green-500/30 focus:border-green-500/50 disabled:bg-slate-800/30 disabled:cursor-not-allowed placeholder-slate-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Trading Experience</label>
                <select
                  value={formData.tradingExperience}
                  onChange={(e) => setFormData({...formData, tradingExperience: e.target.value as any})}
                  disabled={!isEditing}
                  className="w-full px-4 py-3 bg-slate-800/60 border border-slate-600/50 rounded-sm text-slate-200 focus:outline-none focus:ring-2 focus:ring-green-500/30 focus:border-green-500/50 disabled:bg-slate-800/30 disabled:cursor-not-allowed"
                >
                  <option value="Beginner">Beginner</option>
                  <option value="Intermediate">Intermediate</option>
                  <option value="Advanced">Advanced</option>
                  <option value="Professional">Professional</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Trading Style</label>
                <select
                  value={formData.tradingStyle}
                  onChange={(e) => setFormData({...formData, tradingStyle: e.target.value as any})}
                  disabled={!isEditing}
                  className="w-full px-4 py-3 bg-slate-800/60 border border-slate-600/50 rounded-sm text-slate-200 focus:outline-none focus:ring-2 focus:ring-green-500/30 focus:border-green-500/50 disabled:bg-slate-800/30 disabled:cursor-not-allowed"
                >
                  <option value="Day Trading">Day Trading</option>
                  <option value="Swing Trading">Swing Trading</option>
                  <option value="Position Trading">Position Trading</option>
                  <option value="Scalping">Scalping</option>
                </select>
              </div>
            </div>

            {/* Message Display */}
            {message && (
              <div className={`p-3 rounded-sm border text-sm ${
                message.includes('success') || message.includes('completed')
                  ? 'bg-green-900/20 border-green-700/30 text-green-300'
                  : 'bg-red-900/20 border-red-700/30 text-red-300'
              }`}>
                {message}
              </div>
            )}

            {isEditing && (
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="w-full bg-gradient-to-r from-green-600 to-green-500 text-white py-3 rounded-sm font-semibold hover:from-green-700 hover:to-green-600 transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-green-500/25 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Save className="w-4 h-4" />
                <span>{isSaving ? 'Saving...' : 'Save Changes'}</span>
              </button>
            )}
          </div>
        </div>

        {/* Session Information */}
        <div className="space-y-6">
          {/* Current Session */}
          <div className="professional-card p-6 border border-slate-700/50">
            <div className="flex items-center space-x-2 mb-6">
              <Shield className="w-5 h-5 text-green-400" />
              <h2 className="text-xl font-semibold text-slate-200">Session Security</h2>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Smartphone className="w-5 h-5 text-green-400" />
                  <div>
                    <div className="font-medium text-slate-200">Current Device</div>
                    <div className="text-sm text-slate-400">ID: ...{sessionInfo.deviceId}</div>
                  </div>
                </div>
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Clock className="w-5 h-5 text-orange-400" />
                  <div>
                    <div className="font-medium text-slate-200">Session Time</div>
                    <div className="text-sm text-slate-400">{sessionInfo.remainingTime}h remaining</div>
                  </div>
                </div>
                <div className="text-sm text-orange-400 font-medium">
                  {sessionInfo.remainingTime < 2 ? 'Expiring Soon' : 'Active'}
                </div>
              </div>

              <div className="bg-slate-800/50 border border-slate-700/50 rounded-sm p-4">
                <div className="flex items-start space-x-2">
                  <Shield className="w-4 h-4 text-yellow-400 mt-0.5" />
                  <div className="text-sm">
                    <div className="font-medium text-slate-200 mb-1">Security Notice</div>
                    <ul className="text-slate-400 space-y-1">
                      <li>• Single device access for security</li>
                      <li>• Session expires after 12 hours</li>
                      <li>• Automatic logout on new device login</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Subscription Status */}
          <div className="professional-card p-6 border border-slate-700/50">
            <div className="flex items-center space-x-2 mb-6">
              <Phone className="w-5 h-5 text-green-400" />
              <h2 className="text-xl font-semibold text-slate-200">Subscription Status</h2>
            </div>

            <div className="space-y-4">
              {currentPlan && (
                <div className="bg-gradient-to-r from-green-900/20 to-green-800/20 border border-green-700/30 rounded-sm p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold text-green-300">{currentPlan.name} Plan</h3>
                    <span className="px-3 py-1 bg-green-900/30 text-green-400 rounded-sm text-sm font-medium border border-green-700/50">
                      Active
                    </span>
                  </div>
                  <div className="text-sm text-green-300 space-y-1">
                    <div>Price: ₹{currentPlan.price}/{currentPlan.duration.replace('ly', '')}</div>
                    <div>Next billing: 30 days</div>
                    <div>Features: {currentPlan.features.length} included</div>
                  </div>
                </div>
              )}

              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <div className="text-slate-400">Login Method</div>
                  <div className="font-medium text-slate-200">Phone OTP</div>
                </div>
                <div>
                  <div className="text-slate-400">Account Type</div>
                  <div className="font-medium text-slate-200">Premium</div>
                </div>
                <div>
                  <div className="text-slate-400">Member Since</div>
                  <div className="font-medium text-slate-200">Jan 2024</div>
                </div>
                <div>
                  <div className="text-slate-400">Status</div>
                  <div className="font-medium text-green-400">Verified</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Logout Button */}
      <div className="professional-card p-6 bg-gradient-to-r from-red-900/20 to-red-800/20 border border-red-700/30">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-slate-200 mb-1">Account Actions</h3>
            <p className="text-sm text-slate-400">Manage your account security</p>
          </div>
          <button
            onClick={logout}
            className="px-6 py-3 bg-gradient-to-r from-red-600 to-red-500 text-white rounded-sm font-semibold hover:from-red-700 hover:to-red-600 transition-all duration-200 shadow-lg hover:shadow-red-500/25"
          >
            Logout
          </button>
        </div>
      </div>
    </div>
  );
};

export default Profile;