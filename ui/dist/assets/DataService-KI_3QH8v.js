import{D as l,L as s}from"./dhanApiService-CQPu0InZ.js";import{n as p}from"./index-CJAOEYsQ.js";class g{constructor(){this.baseUrl=p()+"/api/market"}static getInstance(){return g.instance||(g.instance=new g),g.instance}async getHistoricalData(e,t,r){try{const o=await fetch(`${this.baseUrl}/historical-data?symbol=${e}&from=${t.toISOString()}&to=${r.toISOString()}`);if(!o.ok)throw new Error(`Failed to get historical data: ${o.statusText}`);const n=await o.json();if(!n||n.length===0){console.log("No cached data found, fetching from Dhan API...");const a=await l.getHistoricalData(e,"NSE_EQ","1m",t.toISOString(),r.toISOString());if(a&&a.length>0){const i=a.map(c=>({symbol:e,timestamp:new Date(c.time*1e3).toISOString(),open:c.open,high:c.high,low:c.low,close:c.close,volume:c.volume||0}));return await this.saveHistoricalData(e,i),i}}return n}catch(o){throw console.error("Failed to get historical data:",o),o}}async saveHistoricalData(e,t){try{const r=await fetch(`${this.baseUrl}/historical-data`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({symbol:e,candles:t})});if(!r.ok)throw new Error(`Failed to save historical data: ${r.statusText}`)}catch(r){throw console.error("Failed to save historical data:",r),r}}async clearHistoricalData(e){try{const t=await fetch(`${this.baseUrl}/historical-data/${e}`,{method:"DELETE"});if(!t.ok)throw new Error(`Failed to clear historical data: ${t.statusText}`)}catch(t){throw console.error("Failed to clear historical data:",t),t}}}class d{constructor(){this.isDhanConnected=!1,this.cache=new Map,this.cacheExpiry=5*60*1e3,this.pendingRequests=new Map,this.marketDataService=g.getInstance(),this.checkBrokerConnection()}static getInstance(){return d.instance||(d.instance=new d),d.instance}async checkBrokerConnection(){const e=localStorage.getItem("dhanCredentials");if(e)try{const t=JSON.parse(e);l.initialize(t),this.isDhanConnected=await l.authenticate()}catch(t){console.error("Error checking broker connection:",t),this.isDhanConnected=!1}}getCachedData(e){const t=this.cache.get(e);return t&&Date.now()-t.timestamp<this.cacheExpiry?t.data:null}setCachedData(e,t){this.cache.set(e,{data:t,timestamp:Date.now()}),e.startsWith("stock_")?this.persistStockData(t):e.startsWith("option_chain_")?this.persistOptionChainData(e,t):e==="fii_dii_data"?this.persistFiiDiiData(t):e==="sector_data"&&this.persistSectorData(t)}persistStockData(e){if(!(!e||!e.symbol))try{const t={symbol:e.symbol,name:e.name||e.symbol,price:e.price||e.lastPrice||0,change:e.change||0,changePercent:e.changePercent||e.pChange||0,volume:e.volume||0,marketCap:e.marketCap||0,peRatio:e.peRatio||e.pe||null,high:e.high||e.dayHigh||0,low:e.low||e.dayLow||0,open:e.open||0,close:e.close||null,prevClose:e.prevClose||e.previousClose||0,date:new Date().toISOString().split("T")[0],isLive:!0},r=s.getByField("stock_data","symbol",e.symbol).filter(o=>o.date===t.date);r.length>0?s.update("stock_data",r[0].id,t):s.create("stock_data",t)}catch(t){console.error("Error persisting stock data to localStorage:",t)}}persistOptionChainData(e,t){if(!(!t||!t.length))try{const r=e.split("_"),o=r[2],n=r[3]||new Date().toISOString().split("T")[0],a=new Date().toISOString().split("T")[0],i=new Date().toTimeString().split(" ")[0];s.getAll("option_chain_data").filter(h=>h.symbol===o&&h.expiryDate===n&&h.date===a).forEach(h=>{s.delete("option_chain_data",h.id)}),t.forEach(h=>{const u={symbol:o,expiryDate:n,strike:h.strike,ceOi:h.ce_oi,peOi:h.pe_oi,ceVolume:h.ce_volume,peVolume:h.pe_volume,ceIv:h.ce_iv,peIv:h.pe_iv,date:a,time:i,isLive:!0};s.create("option_chain_data",u)})}catch(r){console.error("Error persisting option chain data to localStorage:",r)}}persistFiiDiiData(e){if(!(!e||!e.length))try{const t=new Set(e.map(o=>o.date));s.getAll("fii_dii_data").filter(o=>t.has(o.date)).forEach(o=>{s.delete("fii_dii_data",o.id)}),e.forEach(o=>{const n={date:o.date,fiiSell:o.fiiSell,fiiBuy:o.fiiBuy,diiSell:o.diiSell,diiBuy:o.diiBuy,fiiNet:o.fiiNet,diiNet:o.diiNet};s.create("fii_dii_data",n)})}catch(t){console.error("Error persisting FII/DII data to localStorage:",t)}}persistSectorData(e){if(!(!e||!e.length))try{const t=new Date().toISOString().split("T")[0];s.getAll("sector_data").filter(o=>o.date===t).forEach(o=>{s.delete("sector_data",o.id)}),e.forEach(o=>{const n={name:o.name,change:o.change,changePercent:o.changePercent,volume:o.volume,marketCap:o.marketCap,date:t,price:o.price,high52w:o.high52w,low52w:o.low52w,pe:o.pe,momentum:o.momentum,strength:o.strength,rotation:o.rotation};s.create("sector_data",n)})}catch(t){console.error("Error persisting sector data to localStorage:",t)}}getPersistedStockData(e){try{const t=s.getByField("stock_data","symbol",e);return t.length?t.sort((r,o)=>new Date(o.date).getTime()-new Date(r.date).getTime())[0]:null}catch(t){return console.error("Error getting stock data from localStorage:",t),null}}getPersistedOptionChainData(e,t){try{let r=s.getByField("option_chain_data","symbol",e);if(t&&(r=r.filter(n=>n.expiryDate===t)),!r.length)return[];const o=r.reduce((n,a)=>new Date(a.date)>new Date(n)?a.date:n,r[0].date);return r.filter(n=>n.date===o).sort((n,a)=>n.strike-a.strike)}catch(r){return console.error("Error getting option chain data from localStorage:",r),[]}}async getMarketData(){const e="market_data";try{const t=this.getCachedData(e);if(t)return t;if(this.pendingRequests.has(e))return this.pendingRequests.get(e);const r=(async()=>{try{if(this.isDhanConnected)try{const n=await l.getMarketStatus();if(n){const a={marketStatus:n};return this.setCachedData(e,a),a}}catch(n){console.error("Error fetching market data from Dhan:",n)}const o={};return this.setCachedData(e,o),o}finally{this.pendingRequests.delete(e)}})();return this.pendingRequests.set(e,r),r}catch(t){throw console.error("Error fetching market data:",t),this.pendingRequests.delete(e),t}}async getSectorData(){const e="sector_data";try{const t=this.getCachedData(e);if(t)return t;if(this.pendingRequests.has(e))return this.pendingRequests.get(e);const r=(async()=>{try{const o=s.getAll("sector_data");return o.length>0?o:[]}finally{this.pendingRequests.delete(e)}})();return this.pendingRequests.set(e,r),r}catch(t){throw console.error("Error fetching sector data:",t),this.pendingRequests.delete(e),t}}async getFIIDIIData(e=10){const t=`fii_dii_data_${e}`;try{const r=this.getCachedData(t);if(r)return r;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const o=(async()=>{try{const n=s.getAll("fii_dii_data").sort((a,i)=>new Date(i.date).getTime()-new Date(a.date).getTime()).slice(0,e);return n.length>0?n:[]}finally{this.pendingRequests.delete(t)}})();return this.pendingRequests.set(t,o),o}catch(r){throw console.error("Error fetching FII/DII data:",r),this.pendingRequests.delete(t),r}}async getStockData(e){const t=`stock_${e}`;try{const r=this.getCachedData(t);if(r)return r;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const o=(async()=>{try{const n=this.getPersistedStockData(e);return n?(this.setCachedData(t,n),n):null}finally{this.pendingRequests.delete(t)}})();return this.pendingRequests.set(t,o),o}catch(r){throw console.error(`Error fetching stock data for ${e}:`,r),this.pendingRequests.delete(t),r}}async getTopGainers(e=5){const t=`top_gainers_${e}`;try{const r=this.getCachedData(t);if(r)return r;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const o=(async()=>{try{const n=s.getAll("stock_data").filter(a=>a.changePercent>0).sort((a,i)=>i.changePercent-a.changePercent).slice(0,e);return n.length>=e?n:[]}finally{this.pendingRequests.delete(t)}})();return this.pendingRequests.set(t,o),o}catch(r){throw console.error("Error fetching top gainers:",r),this.pendingRequests.delete(t),r}}async getTopLosers(e=5){const t=`top_losers_${e}`;try{const r=this.getCachedData(t);if(r)return r;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const o=(async()=>{try{const n=s.getAll("stock_data").filter(a=>a.changePercent<0).sort((a,i)=>a.changePercent-i.changePercent).slice(0,e);return n.length>=e?n:[]}finally{this.pendingRequests.delete(t)}})();return this.pendingRequests.set(t,o),o}catch(r){throw console.error("Error fetching top losers:",r),this.pendingRequests.delete(t),r}}async getOptionChainData(e,t){const r=`option_chain_${e}_${t||"latest"}`;try{const o=this.getCachedData(r);if(o&&Date.now()-this.cache.get(r).timestamp<6e4)return o;if(this.pendingRequests.has(r))return this.pendingRequests.get(r);const n=(async()=>{try{const a=this.getPersistedOptionChainData(e,t);if(a.length>0){const i=a.map(c=>({strike:c.strike,ce_oi:c.ceOi,pe_oi:c.peOi,ce_volume:c.ceVolume,pe_volume:c.peVolume,ce_iv:c.ceIv,pe_iv:c.peIv}));return this.setCachedData(r,i),i}return[]}finally{this.pendingRequests.delete(r)}})();return this.pendingRequests.set(r,n),n}catch(o){throw console.error(`Error fetching option chain for ${e}:`,o),this.pendingRequests.delete(r),o}}async getExpiryDates(e){const t=`expiry_dates_${e}`;try{const r=this.getCachedData(t);if(r)return r;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const o=(async()=>{try{const n=s.getByField("option_chain_data","symbol",e);if(n.length>0){const a=[...new Set(n.map(i=>i.expiryDate))].sort();if(a.length>0)return this.setCachedData(t,a),a}return[]}finally{this.pendingRequests.delete(t)}})();return this.pendingRequests.set(t,o),o}catch(r){throw console.error(`Error fetching expiry dates for ${e}:`,r),this.pendingRequests.delete(t),r}}async searchStocks(e){try{const r=s.getAll("stock_data").filter(o=>o.symbol.toLowerCase().includes(e.toLowerCase())||o.name.toLowerCase().includes(e.toLowerCase())).slice(0,10);return r.length>0?r.map(o=>({symbol:o.symbol,name:o.name,price:o.price,change:o.change,changePercent:o.changePercent,volume:o.volume,exchange:"NSE"})):[]}catch(t){throw console.error(`Error searching stocks for "${e}":`,t),t}}saveUserPreference(e,t){try{localStorage.setItem(`pref_${e}`,JSON.stringify(t))}catch(r){console.error(`Error saving user preference for ${e}:`,r)}}getUserPreference(e,t){try{const r=localStorage.getItem(`pref_${e}`);return r?JSON.parse(r):t}catch(r){return console.error(`Error getting user preference for ${e}:`,r),t}}getConfig(e,t){try{return{"chart.defaultTimeframe":"1D","chart.defaultIndicators":["RSI","MACD"],"app.theme":"dark","app.language":"en","notifications.enabled":!0,"ai.suggestions":!0}[e]||t}catch(r){return console.error(`Error getting configuration for ${e}:`,r),t}}async getBrokerHoldings(){try{if(!this.isDhanConnected)throw new Error("Broker not connected");return await l.getHoldings()}catch(e){throw console.error("Error fetching broker holdings:",e),e}}async getBrokerPositions(){try{if(!this.isDhanConnected)throw new Error("Broker not connected");return await l.getPositions()}catch(e){throw console.error("Error fetching broker positions:",e),e}}async getBrokerOrders(){try{if(!this.isDhanConnected)throw new Error("Broker not connected");return await l.getOrders()}catch(e){throw console.error("Error fetching broker orders:",e),e}}async getBrokerFunds(){try{if(!this.isDhanConnected)throw new Error("Broker not connected");return await l.getFunds()}catch(e){throw console.error("Error fetching broker funds:",e),e}}logOrder(e,t,r,o,n,a="completed"){try{s.create("order_logs",{user_id:e,order_type:t,params:r,response:o,error:n,status:a,created_at:new Date().toISOString()})}catch(i){console.error("Error logging order to localStorage:",i)}}logBrokerConnection(e,t,r,o){try{const n=s.getByField("broker_connections","client_id",r).filter(a=>a.broker===t&&a.user_id===e);n.length>0?s.update("broker_connections",n[0].id,{status:o,last_connected_at:new Date().toISOString(),updated_at:new Date().toISOString()}):s.create("broker_connections",{user_id:e,broker:t,client_id:r,status:o,last_connected_at:new Date().toISOString(),created_at:new Date().toISOString(),updated_at:new Date().toISOString()})}catch(n){console.error("Error logging broker connection to localStorage:",n)}}getBrokerConnections(e){try{return s.getByField("broker_connections","userId",e).sort((t,r)=>new Date(r.lastConnectedAt).getTime()-new Date(t.lastConnectedAt).getTime())}catch(t){return console.error("Error getting broker connections from localStorage:",t),[]}}getOrderLogs(e,t=10){try{return s.getByField("order_logs","userId",e).sort((r,o)=>new Date(o.createdAt).getTime()-new Date(r.createdAt).getTime()).slice(0,t)}catch(r){return console.error("Error getting order logs from localStorage:",r),[]}}clearCache(){this.cache.clear(),console.log("Data service cache cleared")}async getChartData(e){try{const t=new Date,r=new Date(t.getTime()-30*24*60*60*1e3),o=await this.marketDataService.getHistoricalData(e,r,t);if(o&&o.length>0)return console.log(`Using cached data for ${e} from MongoDB`),o.map(n=>({time:n.timestamp,open:n.open,high:n.high,low:n.low,close:n.close}));if(this.isDhanConnected){const n=t.toISOString().split("T")[0],a=r.toISOString().split("T")[0],i=await l.getHistoricalData(e,"NSE","5m",a,n);if(i&&i.length>0)return await this.marketDataService.saveHistoricalData(e,i),i.map(c=>({time:c.timestamp,open:c.open,high:c.high,low:c.low,close:c.close}))}throw new Error("No chart data available")}catch(t){throw console.error("Error fetching chart data:",t),t}}}export{d as D};
