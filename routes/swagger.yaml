openapi: 3.0.0
info:
  title: TraderDesk API
  version: 1.0.0
  description: |
    Comprehensive API documentation for TraderDesk trading application.
    
    ## Authentication
    This API supports multiple authentication methods:
    
    ### 1. Phone Number Authentication (Recommended)
    Use the `/api/auth/*` endpoints to authenticate with phone number and OTP.
    
    ### 2. Dhan API Integration  
    For Dhan-specific endpoints, use the form at the top of this page to enter your 
    Client ID and Access Token. These will be stored in your browser's localStorage 
    and used for Dhan API requests.
    
    ## Getting Started
    1. **Register/Login**: Use `/api/auth/send-otp` and `/api/auth/verify-otp`
    2. **Get JWT Token**: Copy the token from login response
    3. **Use Token**: Add `Authorization: Bearer <token>` header to protected endpoints
    4. **Configure Brokers**: Use `/api/brokers` to add your broker accounts
    5. **Start Trading**: Use market data and order endpoints

servers:
  # Codespaces public URL (used by default in Codespaces)
  - url: https://automatic-telegram-6r7ww5gw574h456r-3000.app.github.dev
    description: GitHub Codespace public server (default)
  # Local development server
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your JWT access token for authentication
    clientIdAuth:
      type: apiKey
      in: header
      name: client-id
      description: Enter your Dhan client ID
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        phone:
          type: string
          description: User phone number
        email:
          type: string
          description: User email address
        name:
          type: string
          description: User full name
        isActive:
          type: boolean
          description: Whether user account is active
        loginMethod:
          type: string
          enum: [phone, google, email]
          description: Login method used
        registrationDate:
          type: string
          format: date-time
          description: User registration date
        lastLogin:
          type: string
          format: date-time
          description: Last login timestamp
        brokerAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BrokerAccount'

    AuthRequest:
      type: object
      required:
        - phone
      properties:
        phone:
          type: string
          pattern: '^[6-9]\d{9}$'
          description: 10-digit Indian phone number
          example: "9876543210"

    OTPVerificationRequest:
      type: object
      required:
        - phone
        - otp
      properties:
        phone:
          type: string
          pattern: '^[6-9]\d{9}$'
          description: 10-digit Indian phone number
          example: "9876543210"
        otp:
          type: string
          pattern: '^\d{6}$'
          description: 6-digit OTP code
          example: "123456"
        name:
          type: string
          description: User name (optional, for new registrations)
          example: "John Doe"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Response status
        message:
          type: string
          description: Response message
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT access token
            expiresIn:
              type: string
              description: Token expiry duration
              example: "24h"

    BrokerAccount:
      type: object
      properties:
        brokerName:
          type: string
          enum: [Dhan, Zerodha, Upstox, AngelOne, Groww]
        accountId:
          type: string
        apiKey:
          type: string
        accessToken:
          type: string
        isPrimary:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      required:
        - symbol
        - quantity
        - transactionType
        - orderType
        - productType
        - price
      properties:
        symbol:
          type: string
          description: Trading symbol
        quantity:
          type: number
          description: Number of shares
        transactionType:
          type: string
          enum: [BUY, SELL]
        orderType:
          type: string
          enum: [LIMIT, MARKET]
        productType:
          type: string
          enum: [CNC, MIS, NRML]
        price:
          type: number
          description: Order price
    
    Portfolio:
      type: object
      properties:
        userId:
          type: string
        symbol:
          type: string
        quantity:
          type: number
          minimum: 0
        averagePrice:
          type: number
          minimum: 0
        status:
          type: string
          enum: [open, closed]
        lastUpdated:
          type: string
          format: date-time
    
    OHLC:
      type: object
      properties:
        symbol:
          type: string
        open:
          type: number
        high:
          type: number
        low:
          type: number
        close:
          type: number
        volume:
          type: number
        timestamp:
          type: string
          format: date-time

    BrokerConnection:
      type: object
      required:
        - broker
        - customer
        - credentials
        - enabled
      properties:
        broker:
          type: string
          description: Broker name (e.g., dhan, zerodha)
        customer:
          type: string
          description: Unique name to identify the owner of this broker account
        credentials:
          type: object
          description: Broker-specific credentials (e.g., clientId, accessToken for dhan)
        enabled:
          type: boolean
          description: Whether this broker account is enabled for trading
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ChartinkScreener:
      type: object
      required:
        - name
        - chartinkUrl
        - triggerTime
        - frequency
      properties:
        id:
          type: string
          description: Unique identifier for the screener
        name:
          type: string
          maxLength: 100
          description: Name of the screener
          example: "High Volume Breakout"
        description:
          type: string
          maxLength: 500
          description: Description of the screener strategy
          example: "Stocks breaking out with high volume"
        chartinkUrl:
          type: string
          pattern: '^https?:\/\/(www\.)?chartink\.com\/screener\/.*'
          description: Valid Chartink screener URL
          example: "https://chartink.com/screener/high-volume-breakout"
        triggerTime:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          description: Time to trigger the screener (24-hour format)
          example: "09:15"
        frequency:
          type: string
          enum: [daily, weekly, monthly, custom]
          description: How often to run the screener
          example: "daily"
        customFrequency:
          type: object
          description: Custom frequency settings (required when frequency is 'custom')
          properties:
            interval:
              type: integer
              minimum: 1
              description: Interval value
              example: 4
            unit:
              type: string
              enum: [minutes, hours, days]
              description: Interval unit
              example: "hours"
        isActive:
          type: boolean
          description: Whether the screener is active
          example: true
        lastRun:
          type: string
          format: date-time
          description: Last execution timestamp
        nextRun:
          type: string
          format: date-time
          description: Next scheduled execution
        runCount:
          type: integer
          description: Number of times the screener has been executed
          example: 15
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ScreenerResult:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the result
        screenerId:
          type: string
          description: Reference to the screener
        results:
          type: array
          items:
            type: object
            properties:
              symbol:
                type: string
                description: Stock symbol
                example: "RELIANCE"
              exchange:
                type: string
                description: Exchange name
                example: "NSE"
              ltp:
                type: number
                description: Last traded price
                example: 2450.75
              volume:
                type: number
                description: Trading volume
                example: 1500000
              change:
                type: number
                description: Price change
                example: 25.50
              changePercent:
                type: number
                description: Percentage change
                example: 1.05
              metadata:
                type: object
                description: Additional data from the screener
        totalResults:
          type: integer
          description: Total number of results
          example: 25
        runAt:
          type: string
          format: date-time
          description: Execution timestamp
        status:
          type: string
          enum: [success, error, partial]
          description: Execution status
          example: "success"
        errorMessage:
          type: string
          description: Error message if status is 'error'

    ChartinkScreenerRequest:
      type: object
      required:
        - name
        - chartinkUrl
        - triggerTime
        - frequency
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the screener
          example: "High Volume Breakout"
        description:
          type: string
          maxLength: 500
          description: Description of the screener strategy
          example: "Stocks breaking out with high volume"
        chartinkUrl:
          type: string
          pattern: '^https?:\/\/(www\.)?chartink\.com\/screener\/.*'
          description: Valid Chartink screener URL
          example: "https://chartink.com/screener/high-volume-breakout"
        triggerTime:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          description: Time to trigger the screener (24-hour format)
          example: "09:15"
        frequency:
          type: string
          enum: [daily, weekly, monthly, custom]
          description: How often to run the screener
          example: "daily"
        customFrequency:
          type: object
          description: Custom frequency settings (required when frequency is 'custom')
          properties:
            interval:
              type: integer
              minimum: 1
              description: Interval value
              example: 4
            unit:
              type: string
              enum: [minutes, hours, days]
              description: Interval unit
              example: "hours"

paths:
  # Authentication endpoints
  /api/auth/send-otp:
    post:
      tags:
        - Authentication
      summary: Send OTP to phone number
      description: Send a 6-digit OTP to the provided phone number for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
            example:
              phone: "9876543210"
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "OTP sent successfully"
                  demoOTP:
                    type: string
                    description: "Demo OTP (only in development mode)"
                    example: "123456"
        '400':
          description: Invalid phone number
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Please provide a valid 10-digit Indian phone number"
        '500':
          description: Server error

  /api/auth/verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify OTP and login/register
      description: Verify the OTP and either login existing user or register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerificationRequest'
            example:
              phone: "9876543210"
              otp: "123456"
              name: "John Doe"
      responses:
        '200':
          description: Login/Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid OTP or input validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid OTP"
        '500':
          description: Server error

  /api/auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  /api/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Refresh the JWT access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: New JWT access token
                      expiresIn:
                        type: string
                        example: "24h"
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/market-data/{symbol}:
    get:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Subscribe to live market data
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream of live market data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OHLC'

  /api/market-data/{symbol}/historical:
    get:
      summary: Fetch historical OHLC data
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
        - name: timeframe
          in: query
          schema:
            type: string
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Historical OHLC data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OHLC'

  /api/orders:
    post:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Place a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/orders/{orderId}:
    put:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Modify an existing order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    
    delete:
      summary: Cancel an existing order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled successfully
    
    get:
      summary: Get live status of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/portfolio/holdings:
    get:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Fetch user holdings
      responses:
        '200':
          description: User holdings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'

  /api/portfolio/positions:
    get:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Fetch open positions
      responses:
        '200':
          description: Open positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'

  /market/live/{index}:
    get:
      tags:
        - Market Data
      summary: Get live index feed
      description: Stream live market data for specified index
      parameters:
        - in: path
          name: index
          required: true
          schema:
            type: string
            enum: [nifty, banknifty, finnifty, sensex, midcap]
          description: Index name to stream
      responses:
        200:
          description: Successful operation
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  symbol:
                    type: string
                  ltp:
                    type: number
                  change:
                    type: number
                  percentChange:
                    type: number
                  high:
                    type: number
                  low:
                    type: number
                  volume:
                    type: number
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/brokers:
    post:
      summary: Add a broker account for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - broker
                - customer
                - credentials
              properties:
                broker:
                  type: string
                  description: Broker name (e.g., dhan)
                customer:
                  type: string
                  description: Unique name for this broker account (e.g., 'my-dhan', 'wife-dhan')
                credentials:
                  type: object
                  description: Broker credentials (e.g., clientId, accessToken)
      responses:
        '201':
          description: Broker account added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerConnection'
    get:
      summary: List all broker accounts for the authenticated user
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        '200':
          description: List of broker accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrokerConnection'
        '400':
          description: Invalid input

  /api/brokers/{brokerAccountId}:
    patch:
      summary: Enable or disable a broker account
      parameters:
        - name: brokerAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
      responses:
        '200':
          description: Broker account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerConnection'

  # Chartink Screener endpoints
  /api/chartink-screeners:
    post:
      tags:
        - Chartink Screeners
      summary: Create a new Chartink screener
      description: Create a new Chartink screener with custom trigger time and frequency
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartinkScreenerRequest'
            example:
              name: "High Volume Breakout"
              description: "Stocks breaking out with high volume"
              chartinkUrl: "https://chartink.com/screener/high-volume-breakout"
              triggerTime: "09:15"
              frequency: "daily"
      responses:
        '201':
          description: Screener created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Chartink screener created successfully"
                  data:
                    type: object
                    properties:
                      screener:
                        $ref: '#/components/schemas/ChartinkScreener'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation error"
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
        '500':
          description: Server error

    get:
      tags:
        - Chartink Screeners
      summary: Get all Chartink screeners
      description: Get all Chartink screeners for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: isActive
          in: query
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Screeners retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      screeners:
                        type: array
                        items:
                          $ref: '#/components/schemas/ChartinkScreener'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/chartink-screeners/{id}:
    get:
      tags:
        - Chartink Screeners
      summary: Get a specific screener
      description: Get a specific Chartink screener by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Screener ID
      responses:
        '200':
          description: Screener retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      screener:
                        $ref: '#/components/schemas/ChartinkScreener'
        '401':
          description: Unauthorized
        '404':
          description: Screener not found
        '500':
          description: Server error

    put:
      tags:
        - Chartink Screeners
      summary: Update a screener
      description: Update an existing Chartink screener
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Screener ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: "Updated High Volume Breakout"
                description:
                  type: string
                  maxLength: 500
                  example: "Updated description"
                chartinkUrl:
                  type: string
                  pattern: '^https?:\/\/(www\.)?chartink\.com\/screener\/.*'
                  example: "https://chartink.com/screener/updated-screener"
                triggerTime:
                  type: string
                  pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
                  example: "10:30"
                frequency:
                  type: string
                  enum: [daily, weekly, monthly, custom]
                  example: "weekly"
                customFrequency:
                  type: object
                  properties:
                    interval:
                      type: integer
                      minimum: 1
                    unit:
                      type: string
                      enum: [minutes, hours, days]
                isActive:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Screener updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Chartink screener updated successfully"
                  data:
                    type: object
                    properties:
                      screener:
                        $ref: '#/components/schemas/ChartinkScreener'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '404':
          description: Screener not found
        '500':
          description: Server error

    delete:
      tags:
        - Chartink Screeners
      summary: Delete a screener
      description: Delete a Chartink screener and all its results
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Screener ID
      responses:
        '200':
          description: Screener deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Chartink screener deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: Screener not found
        '500':
          description: Server error

  /api/chartink-screeners/{id}/results:
    get:
      tags:
        - Chartink Screeners
      summary: Get screener results
      description: Get execution results for a specific screener
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Screener ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [success, error, partial]
          description: Filter by execution status
      responses:
        '200':
          description: Results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ScreenerResult'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        '401':
          description: Unauthorized
        '404':
          description: Screener not found
        '500':
          description: Server error

  /api/chartink-screeners/{id}/latest-result:
    get:
      tags:
        - Chartink Screeners
      summary: Get latest result
      description: Get the latest execution result for a specific screener
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Screener ID
      responses:
        '200':
          description: Latest result retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ScreenerResult'
        '401':
          description: Unauthorized
        '404':
          description: Screener not found
        '500':
          description: Server error

  /api/chartink-screeners/{id}/run:
    post:
      tags:
        - Chartink Screeners
      summary: Run screener manually
      description: Manually trigger execution of a screener
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Screener ID
      responses:
        '200':
          description: Screener run initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Screener run initiated successfully"
                  data:
                    type: object
                    properties:
                      screener:
                        $ref: '#/components/schemas/ChartinkScreener'
                      result:
                        $ref: '#/components/schemas/ScreenerResult'
        '401':
          description: Unauthorized
        '404':
          description: Screener not found
        '500':
          description: Server error