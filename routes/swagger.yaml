openapi: 3.0.0
info:
  title: Dhan Market API
  version: 1.0.0
  description: |
    API documentation for Dhan Market application.
    
    ## Authentication
    This API requires authentication with Dhan API credentials.
    Use the form at the top of this page to enter your Client ID and Access Token.
    These will be stored in your browser's localStorage and used for all API requests.

servers:
  - url: https://automatic-telegram-6r7ww5gw574h456r-3000.app.github.dev
    description: GitHub Codespace public server (default)
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your Dhan access token
    clientIdAuth:
      type: apiKey
      in: header
      name: client-id
      description: Enter your Dhan client ID
  schemas:
    Order:
      type: object
      required:
        - symbol
        - quantity
        - transactionType
        - orderType
        - productType
        - price
      properties:
        symbol:
          type: string
          description: Trading symbol
        quantity:
          type: number
          description: Number of shares
        transactionType:
          type: string
          enum: [BUY, SELL]
        orderType:
          type: string
          enum: [LIMIT, MARKET]
        productType:
          type: string
          enum: [CNC, MIS, NRML]
        price:
          type: number
          description: Order price
    
    Portfolio:
      type: object
      properties:
        userId:
          type: string
        symbol:
          type: string
        quantity:
          type: number
          minimum: 0
        averagePrice:
          type: number
          minimum: 0
        status:
          type: string
          enum: [open, closed]
        lastUpdated:
          type: string
          format: date-time
    
    OHLC:
      type: object
      properties:
        symbol:
          type: string
        open:
          type: number
        high:
          type: number
        low:
          type: number
        close:
          type: number
        volume:
          type: number
        timestamp:
          type: string
          format: date-time

    BrokerConnection:
      type: object
      required:
        - broker
        - customer
        - credentials
        - enabled
      properties:
        broker:
          type: string
          description: Broker name (e.g., dhan, zerodha)
        customer:
          type: string
          description: Unique name to identify the owner of this broker account
        credentials:
          type: object
          description: Broker-specific credentials (e.g., clientId, accessToken for dhan)
        enabled:
          type: boolean
          description: Whether this broker account is enabled for trading
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /api/market-data/{symbol}:
    get:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Subscribe to live market data
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream of live market data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OHLC'

  /api/market-data/{symbol}/historical:
    get:
      summary: Fetch historical OHLC data
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
        - name: timeframe
          in: query
          schema:
            type: string
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Historical OHLC data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OHLC'

  /api/orders:
    post:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Place a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/orders/{orderId}:
    put:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Modify an existing order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    
    delete:
      summary: Cancel an existing order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled successfully
    
    get:
      summary: Get live status of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/portfolio/holdings:
    get:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Fetch user holdings
      responses:
        '200':
          description: User holdings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'

  /api/portfolio/positions:
    get:
      security:
        - bearerAuth: []
        - clientIdAuth: []
      summary: Fetch open positions
      responses:
        '200':
          description: Open positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'

  /market/live/{index}:
    get:
      tags:
        - Market Data
      summary: Get live index feed
      description: Stream live market data for specified index
      parameters:
        - in: path
          name: index
          required: true
          schema:
            type: string
            enum: [nifty, banknifty, finnifty, sensex, midcap]
          description: Index name to stream
      responses:
        200:
          description: Successful operation
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  symbol:
                    type: string
                  ltp:
                    type: number
                  change:
                    type: number
                  percentChange:
                    type: number
                  high:
                    type: number
                  low:
                    type: number
                  volume:
                    type: number
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/brokers:
    post:
      summary: Add a broker account for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - broker
                - customer
                - credentials
              properties:
                broker:
                  type: string
                  description: Broker name (e.g., dhan)
                customer:
                  type: string
                  description: Unique name for this broker account (e.g., 'my-dhan', 'wife-dhan')
                credentials:
                  type: object
                  description: Broker credentials (e.g., clientId, accessToken)
      responses:
        '201':
          description: Broker account added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerConnection'
    get:
      summary: List all broker accounts for the authenticated user
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        '200':
          description: List of broker accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrokerConnection'
        '400':
          description: Invalid input

  /api/brokers/{brokerAccountId}:
    patch:
      summary: Enable or disable a broker account
      parameters:
        - name: brokerAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
      responses:
        '200':
          description: Broker account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerConnection'