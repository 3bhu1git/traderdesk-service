openapi: 3.0.0
info:
  title: TraderDesk Service API
  version: 1.0.0
  description: API documentation for the TraderDesk Service
servers:
  - url: http://localhost:3000/api
    description: Local development server
paths:
  /market-data/historical-data:
    post:
      summary: Save historical market data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string, description: Trading symbol }
                data: { type: array, items: { type: object }, description: Array of historical data points }
      responses:
        201:
          description: Historical data saved successfully
        400:
          description: Invalid input
    get:
      summary: Retrieve historical market data
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          required: true
          description: Trading symbol
      responses:
        200:
          description: Historical data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        400:
          description: Invalid input
    delete:
      summary: Delete historical market data for a symbol
      parameters:
        - in: path
          name: symbol
          schema:
            type: string
          required: true
          description: Trading symbol
      responses:
        200:
          description: Historical data deleted successfully
        400:
          description: Invalid input
  /orders/place:
    post:
      summary: Place a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string }
                quantity: { type: integer }
                price: { type: number }
                type: { type: string, enum: [ 'buy', 'sell' ] }
      responses:
        201:
          description: Order placed successfully
        400:
          description: Invalid order data
  /orders/cancel/{orderId}:
    delete:
      summary: Cancel an existing order
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: ID of the order to cancel
      responses:
        200:
          description: Order cancelled successfully
        404:
          description: Order not found
  /portfolio/holdings:
    get:
      summary: Get current portfolio holdings
      responses:
        200:
          description: Portfolio holdings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    symbol: { type: string }
                    quantity: { type: integer }
                    averagePrice: { type: number }
  /portfolio/performance:
    get:
      summary: Get portfolio performance metrics
      responses:
        200:
          description: Portfolio performance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalValue: { type: number }
                  dailyChange: { type: number }
                  totalProfitLoss: { type: number }
  /broker/add:
    post:
      summary: Add a new broker account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                accountData: { type: object }
      responses:
        201:
          description: Broker account added successfully
        400:
          description: Invalid input
  /broker/dhan:
    post:
      summary: Add Dhan connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                clientId: { type: string }
                apiKey: { type: string }
                accessToken: { type: string }
      responses:
        201:
          description: Dhan connection added successfully
        400:
          description: Invalid input
  /broker/primary:
    put:
      summary: Set primary account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                accountId: { type: string }
      responses:
        200:
          description: Primary account set successfully
        400:
          description: Invalid input
  /broker/list:
    get:
      summary: Get all broker accounts
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        200:
          description: Broker accounts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        400:
          description: Invalid input
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - ApiKeyAuth: []
  - BearerAuth: []